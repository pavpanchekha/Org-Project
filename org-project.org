#+TITLE: Org-Project: Pretty Org-mode Programs
#+AUTHOR: Pavel Panchekha <me@pavpanchekha.com>
#+SETUPFILE: org-project.setup

Org-Project is a set of options and themes for [[http://orgmode.org][Org-mode]] optimized for
literate programs written with Org-mode.  It is designed to work
directly with Org-mode's HTML export tool.

* About

Org-Project is a set of styles and themes written by [[mailto:me@pavpanchekha.com][Pavel Panchekha]]
for exporting Org-mode literate programs.  With it, Org-mode's default
HTML export should be all you need to generate and elegant project
page.

Org-Project builds upon other important tools, in particular [[http://jquery.com][jQuery]]
and [[http://code.google.com/p/hyphenator/][hyphenator.js]], as well as on the [[http://code.google.com/apis/libraries/devguide.html][Google Javascript CDN]].

** Using Org-Project

To use Org-Project in your Org-mode file, simply copy all project
files (that is, =main.js=, =main.css=, and =org-project.setup=, and
optionally =hyphenator.js=) to the same directory as your Org-mode
file and add the line:

#+BEGIN_SRC org
#+SETUPFILE: org-project.setup
#+END_SRC

You can choose to include or not include the =hyphenator.js= file,
which hyphenates the document.  It may cause lag on very old machines
or browsers, but visibly improves the document.

** License

Org-Project is fully open-source being licensed under the BSD License,
which follows.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the
   distribution.
3. The name of the author may not be used to endorse or promote
   products derived from this software without specific prior written
   permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

* Todo List
** TODO Allow hiding source code commentary?                      :scripting:
** TODO Should filtering by tags be per-heirarchy-level?                :bug:
* Changelog
** Version 0.3                                                        :major:
   Added Org-mode class names for syntax-highlighting support.

*** DONE Support Org-mode syntax highlighting                 :major:styling:
*** DONE Better distinguish headings                                :styling:
** Version 0.2                                                        :major:
   Significantly improves styling of TODO lists by adding tag
   filtering and smaller fonts.

*** DONE Improve styling of TODO entries                            :styling:
*** DONE Investigate why Table of Contents is necessary                 :bug:
*** DONE Improve styling of tags                                    :styling:
*** DONE Allow filtering by tag                             :scripting:major:
** Version 0.1                                                        :major:
   Initial working version.  Basic page switching functionality and
   styling.
* Source code

The basic idea is to use Javascript to loop over a page, find all of
the first-level sections, and separate them out into "pages".  We'll
index all of the headings into list items in the =#pages= list and use
them like buttons to switch between the pages.

** Setup-file
   
Org-mode provides a =#+SETUPFILE= pragma to allow you to split your
header into parts.  We'll provide a setup file of our own in
=org-project.setup= to make Org-Project easy to use.

#+BEGIN_SRC org :tangle org-project.setup
# -*- mode: org; -*-
#+END_SRC

Now, our JavaScript requires jQuery, but honestly, I have enough
copies of various versions of that library lying around my hard drive,
so I'm going to use the Google CDN.  It'll probably make the Internet
better, too!

#+BEGIN_SRC org :tangle org-project.setup
#+STYLE: <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
#+END_SRC

We'll need a Javascript file and some CSS.  To make sure they're
included in the header, we use the =#+STYLE= pragma, even for
JavaScript files.  Org-mode just dumps the HTML, so no matter.

#+BEGIN_SRC org :tangle org-project.setup
#+STYLE: <link rel="stylesheet" type="text/css" href="org-project.css"/>
#+STYLE: <script type="text/javascript" src="org-project.js"></script>
#+END_SRC

Finally, the super-neat Hyphenate.js project is a small JavaScript
library to hyphenate documents.  It visibly improves the look of large
amounts of text, so we include it as well.  If it's missing, no great
loss.

#+BEGIN_SRC org :tangle org-project.setup
#+STYLE: <script type="text/javascript" src="hyphenate.js"></script>
#+END_SRC

Org-mode likes to sprinkle section numbers throughout the document,
but that looks sort of ugly, so we turn that off.  We hide the table
of contents because we no longer need it.

#+BEGIN_SRC org :tangle org-project.setup
#+OPTIONS: toc:nil num:nil
#+END_SRC

** JavaScript
*** On-load

The JavaScript is run when jQuery is already loaded, so we can make
extensive use of it if we wish.  So we start by registering its onload
function.  We need to do four things on-load: make the list of pages,
possibly switch to one if a hash is present, trigger the hyphenator,
and hide all of the now-unnecessary titles.

First we call out to a =pageSection= to build the section/page list.
Note that we already do this if we haven't already; Org-mode has the
odd habit of sometimes including a JavaScript file multiple times.

#+BEGIN_SRC javascript :tangle org-project.js
$(function () {
    if (!$("#pages").length) {
        pageSection();
    }
#+END_SRC

Next we need to switch to the right page is the URL hash is present.
This is so that people can, say, bookmark one of the pages.  Now, what
we need to do is:

- Find the =a= element in the DOM
- Walk up to the page itself
- Figure out which page to click
- Click it to switch to it
- Click the link to trigger the browser's scroller

#+BEGIN_SRC javascript :tangle org-project.js
    if (window.location.hash) {
        $("a").filter(function () {
            return $(this).attr("href") == window.location.hash;
        }).each(function () {
            var id = $(this).parent(".outline-2").data("page-id");
            if (id) {
                $("$pages li a").click();
            }
        }).click();
        window.location.hash = window.location.hash
    }
#+END_SRC

Next we want to run the hyphenation script if it exists; we just put
the =run= command in a conditional.  Note that this requires a certain
class on our content element.

#+BEGIN_SRC javascript :tangle org-project.js
    $("#content").addClass("hyphenate");
    if (window.Hyphenator) {
        window.Hyphenator.run();
    }
#+END_SRC

Finally, we want to hide all of the =h2= tags.  But we use those tags
to clear floating elements (if your page has lots of top-level
headings, say).  So instead we just systematically zero all
measurements of their box.

#+BEGIN_SRC javascript :tangle org-project.js
    $(".outline-2 h2").css({
        "fontSize": 0,
        "margin": 0,
        "padding": 0,
        "height": 0,
    });
#+END_SRC

Lastly, for CSS purposes, we're going to add a class to the actual
headings containing TODO items.

#+BEGIN_SRC javascript :tangle org-project.js
    $(".todo, .done").parent().addClass("todo-item");
});
#+END_SRC
*** The =pageSection= function

We want to create an associative array of section text to page id.
This page id is later used in URL hashes and such.

#+BEGIN_SRC javascript :tangle org-project.js
function pageSection() {
    var sections = new Array();
#+END_SRC

Org-mode uses the =outline-2= class on all top-level headings (why 2?
Probably because it has an =h2= inside, but it's still confusing).  We
just take each in turn and add it to the array.  We also add the page
ID as data to the page itself, so we can later easily find it.

We also want to clear some basic cruft from the section titles.  Of
course, as a general rule, you should keep them short, but beyond that
we have to clear out numbers from numbered sections and also those
[0/0] things that Org-mode can make use of.

#+BEGIN_SRC javascript :tangle org-project.js
    $(".outline-2").each(function (i) {
        var text = $(this).find("h2").text();
        if (text) {
            text = text.trim().replace(/\[[\d/%]+\]/, "");
            text = text.trim().replace(/^[\d\.]\s+/, "");
            sections.push({text: text, id: i});
            $(this).data("page-id", i);
        }
    });
#+END_SRC

Now we need to create and add all of our buttons.  Each button will
just be a list item with a link inside.  The link points to =#$id=,
where =$id= is the page id.  So that we can be bookmarked by page and
such.

#+BEGIN_SRC javascript :tangle org-project.js
    var pages = $("<ul id='pages'></ul>");
    
    for(var i=0; i < sections.length; i++) {
        var s = sections[i];
        elem = $("<li><a href='#" + s.id + "'>" + s.text + "</a></li>");
        pages.append(elem);
#+END_SRC

Now to establish the click handler for these buttons.  We're going to
want to hide all currently shown pages and show the new one.  We also
want to add the =selected= class from all of the buttons and then give
it back to the current one.  Finally we return a value that propogates
the event.

#+BEGIN_SRC javascript :tangle org-project.js
        elem.find("a").click(function() {
            var el = $(this)
            var id = $(this).attr("href").slice(1);

            $(".outline-2").hide();
            $(".outline-2").eq(id).show();

            $("#pages li").removeClass("selected");
            $(this).parent("li").addClass("selected");
            return 0;
        });
    }
#+END_SRC

Lastly we must attach our button bar to the page.  Just for touch-up,
we now want to hide the table of contents (which we've bettered) and
go to the first page.

#+BEGIN_SRC javascript :tangle org-project.js
    $(".outline-2:first").before(pages);
    $("#table-of-contents").hide();
    $("#pages li a").eq(0).click();
}
#+END_SRC

*** Tag Filtering

Clicking on a tag should filter out sections not containing said tag.
This emulates behavior in Emacs and makes Org-Project a fairly
efficient bug tracking system.  We attach another handler to the
on-ready event to add filtration features to Org-Project.

Note that each =.tag= contains another =span= inside it whose class is
the same as its contents; thus we can use that class for filtering.
Also note that we hide the *parent* of the =.todo-item=; this hides
the text below the headline as well as the headline itself.

#+BEGIN_SRC javascript :tangle org-project.js
$(function () {
    $(".tag span").click(function () {
        var cls = $(this).attr("class");
        $(".todo-item:not(:has(." + cls + "))").parent().toggle();
#+END_SRC

For CSS styling purposes, we add a class to tags to make it obvious
that they are clickable and also add classes to selected tags (tags
that we are filtering on.

#+BEGIN_SRC javascript :tangle org-project.js
        $("." + cls).parent().toggleClass("selected");
    }).addClass("clickable");
});
#+END_SRC

** Styling

Our styling has to accomplish three tasks: it must set up pages to be
switched; it must set up the pages buttons; and it must make the page
look pretty.

*** Basic page styling

First, we need to reset the =html= and =body= padding lest we get ugly
white borders around the document.

#+BEGIN_SRC css :tangle org-project.css
html, body {
    padding: 0;
    margin: 0 .1em;
}
#+END_SRC

Now, in the making things pretty department, we're going to grab the
content and put it into a grayish column in the center of the screen,
then put the title stretching across that column with the same color
as the border.

Note that we set =overflow-x= to hidden; this is because of the use of
negative margins below.  Also, we use, of course, the standard
=margin: auto= trick to center the column and a negative margin to
make it look like the header is hierarchically higher than the main
content.

#+BEGIN_SRC css :tangle org-project.css
#content {
    padding: 1em 3em;
    max-width: 650px;
    margin: 0 auto;
    background: #EEEEEC;
    border-left: 3px solid #D3D7CF;
    border-right: 3px solid #D3D7CF;
    font-size: 100%;
    overflow-y: auto;
    overflow-x: hidden;
}

h1 {
    font-size: 140%;
    margin-top: 0;
    background: #D3D7CF;
    padding: .5em;
    margin: 0 -3em;
}
#+END_SRC

We also do some basic styling to justify text, make source code look a
bit more stand-out, and also hide the ugly footer that Org-mode adds
to everything.

#+BEGIN_SRC css :tangle org-project.css
p {
    text-align: justify;
}

pre {
    border-left: 5px solid #BABDB6;
    padding: 10px;
    line-height: 1.0em;
    color: black;
}

#postamble {
    display: none;
}
#+END_SRC

*** Page list styling

Now, our pages list will use floating to make the list horizontal, so we need
the element that comes after them to clear floats; this element is =h2=.  Later,
we won't be able to hide it because of this choice (hidden elements don't
clear), but this is cleaner than ugly =:after= hacks.

We also add a negative horizontal margin to the pages list because the
individual list items have margins.  That this has to be done is very annoying.

We also add a border on top to more clearly visually separate the header from
the pages.

#+BEGIN_SRC css :tangle org-project.css
#pages {
    list-style: none inside;
    clear: both;
    margin: 0 -.2em;
    padding: 10px 0;
    border-top: 1px solid black;
    height: 1em;
}

h2 {
    clear: both;
}
#+END_SRC

For the list items themselves, we float them with padding to get the button bar
effect.

We also run the standard tricks for making the selected element not look
clickable, and of course we turn off the default blue-underlined style for
links.

#+BEGIN_SRC css :tangle org-project.css
#pages li {
    float: left;
    margin: .6em .2em;
}

#pages a {
    text-decoration: none;
    color: black;
    font-size: 1.0em;
    font-weight: bold;
    border: .3em solid #BABDB6;
    padding: .2em;
}

#pages li a:hover {
    background: #D3D7CF;
}

#pages li.selected a {
    cursor: default;
    background: #BABDB6;
}
#+END_SRC

Finally, some of the headings are hard to distinguish, which is a
problem.  We underline =<h3>= headings to try to help out.

#+BEGIN_SRC css :tangle org-project.css
h3 {
    border-bottom: 1px solid black;
}
#+END_SRC

*** Todo Entry Styling

Styling TODO entries is hard as Org-mode presents them as a header
with a =.todo= or =.done= element inside.  CSS3, gives us the
=:contains= selector that works perfectly with this use case, but it's
not well supported.  You know what does support it?  jQuery!  So we'll
add the =.todo-item= class to parents of =.todo= and =.done= elements
with jQuery, and then style them here.

#+BEGIN_SRC css :tangle org-project.css
.todo-item {
    font-size: 1em;
    margin: 10px 0;
}
#+END_SRC

*** Tag Styling

Todo entries often carry tags (actually, many things can carry tags),
so let's pick a good style for tags here.

#+BEGIN_SRC css :tangle org-project.css
.tag span {
    float: right;
    display: block;
    padding: 1px 2px;
    background: #D3D7CF;
    border: 2px solid #BABDB6;
    border-radius: 2px;
    margin: 0 2px;
}
#+END_SRC

The "official" styles have a stupid blue background for tags, we don't
want it.

#+BEGIN_SRC css :tangle org-project.css
.tag {
    background: transparent;
}
#+END_SRC

Our JavaScript above adds the =.clickable= class to tags that we can
filter by (which might be none if JavaScript is disabled!).  We use
that class to add hover effects and the proper cursor.

#+BEGIN_SRC css :tangle org-project.css
.tag .clickable {
    cursor: pointer;
}

.tag .clickable:hover {
    background: #BABDB6;
}
#+END_SRC

We also use the =.selected= class to indicate that we are actively
filtering on a tag.

#+BEGIN_SRC css :tangle org-project.css
.tag .selected {
    background: #BABDB6;
}
#+END_SRC
*** Syntax Highlighting

For syntax-highlighting to work, we need to force Org-mode to generate
CSS class names, that we then fill in the styles for.  Below is just a
giant list of all of the styles.

#+BEGIN_SRC css :tangle org-project.css
.org-bold { /* bold */ font-weight: bold; }
.org-bold-italic { /* bold-italic */ font-weight: bold; font-style: italic; }
.org-buffer-menu-buffer { /* buffer-menu-buffer */ font-weight: bold; }
.org-builtin { /* font-lock-builtin-face */ color: #7a378b; }
.org-button { /* button */ text-decoration: underline; }
.org-calendar-today { /* calendar-today */ text-decoration: underline; }
.org-change-log-acknowledgement { /* change-log-acknowledgement */ color: #b22222; }
.org-change-log-conditionals { /* change-log-conditionals */ color: #a0522d; }
.org-change-log-date { /* change-log-date */ color: #8b2252; }
.org-change-log-email { /* change-log-email */ color: #a0522d; }
.org-change-log-file { /* change-log-file */ color: #0000ff; }
.org-change-log-function { /* change-log-function */ color: #a0522d; }
.org-change-log-list { /* change-log-list */ color: #a020f0; }
.org-change-log-name { /* change-log-name */ color: #008b8b; }
.org-comint-highlight-input { /* comint-highlight-input */ font-weight: bold; }
.org-comint-highlight-prompt { /* comint-highlight-prompt */ color: #00008b; }
.org-comment { /* font-lock-comment-face */ color: #b22222; }
.org-comment-delimiter { /* font-lock-comment-delimiter-face */ color: #b22222; }
.org-completions-annotations { /* completions-annotations */ font-style: italic; }
.org-completions-common-part { /* completions-common-part */ color: #000000; background-color: #ffffff; }
.org-completions-first-difference { /* completions-first-difference */ font-weight: bold; }
.org-constant { /* font-lock-constant-face */ color: #008b8b; }
.org-diary { /* diary */ color: #ff0000; }
.org-diff-context { /* diff-context */ color: #7f7f7f; }
.org-diff-file-header { /* diff-file-header */ background-color: #b3b3b3; font-weight: bold; }
.org-diff-function { /* diff-function */ background-color: #cccccc; }
.org-diff-header { /* diff-header */ background-color: #cccccc; }
.org-diff-hunk-header { /* diff-hunk-header */ background-color: #cccccc; }
.org-diff-index { /* diff-index */ background-color: #b3b3b3; font-weight: bold; }
.org-diff-nonexistent { /* diff-nonexistent */ background-color: #b3b3b3; font-weight: bold; }
.org-diff-refine-change { /* diff-refine-change */ background-color: #d9d9d9; }
.org-dired-directory { /* dired-directory */ color: #0000ff; }
.org-dired-flagged { /* dired-flagged */ color: #ff0000; font-weight: bold; }
.org-dired-header { /* dired-header */ color: #228b22; }
.org-dired-ignored { /* dired-ignored */ color: #7f7f7f; }
.org-dired-mark { /* dired-mark */ color: #008b8b; }
.org-dired-marked { /* dired-marked */ color: #ff0000; font-weight: bold; }
.org-dired-perm-write { /* dired-perm-write */ color: #b22222; }
.org-dired-symlink { /* dired-symlink */ color: #a020f0; }
.org-dired-warning { /* dired-warning */ color: #ff0000; font-weight: bold; }
.org-doc { /* font-lock-doc-face */ color: #8b2252; }
.org-escape-glyph { /* escape-glyph */ color: #a52a2a; }
.org-file-name-shadow { /* file-name-shadow */ color: #7f7f7f; }
.org-flyspell-duplicate { /* flyspell-duplicate */ color: #cdad00; font-weight: bold; text-decoration: underline; }
.org-flyspell-incorrect { /* flyspell-incorrect */ color: #ff4500; font-weight: bold; text-decoration: underline; }
.org-fringe { /* fringe */ background-color: #f2f2f2; }
.org-function-name { /* font-lock-function-name-face */ color: #0000ff; }
.org-header-line { /* header-line */ color: #333333; background-color: #e5e5e5; }
.org-help-argument-name { /* help-argument-name */ font-style: italic; }
.org-highlight { /* highlight */ background-color: #b4eeb4; }
.org-holiday { /* holiday */ background-color: #ffc0cb; }
.org-isearch { /* isearch */ color: #b0e2ff; background-color: #cd00cd; }
.org-isearch-fail { /* isearch-fail */ background-color: #ffc1c1; }
.org-italic { /* italic */ font-style: italic; }
.org-keyword { /* font-lock-keyword-face */ color: #a020f0; }
.org-lazy-highlight { /* lazy-highlight */ background-color: #afeeee; }
.org-link { /* link */ color: #0000ff; text-decoration: underline; }
.org-link-visited { /* link-visited */ color: #8b008b; text-decoration: underline; }
.org-log-edit-header { /* log-edit-header */ color: #a020f0; }
.org-log-edit-summary { /* log-edit-summary */ color: #0000ff; }
.org-log-edit-unknown-header { /* log-edit-unknown-header */ color: #b22222; }
.org-match { /* match */ background-color: #ffff00; }
.org-next-error { /* next-error */ background-color: #eedc82; }
.org-nobreak-space { /* nobreak-space */ color: #a52a2a; text-decoration: underline; }
.org-org-archived { /* org-archived */ color: #7f7f7f; }
.org-org-block { /* org-block */ color: #7f7f7f; }
.org-org-block-begin-line { /* org-block-begin-line */ color: #b22222; }
.org-org-block-end-line { /* org-block-end-line */ color: #b22222; }
.org-org-checkbox { /* org-checkbox */ font-weight: bold; }
.org-org-checkbox-statistics-done { /* org-checkbox-statistics-done */ color: #228b22; font-weight: bold; }
.org-org-checkbox-statistics-todo { /* org-checkbox-statistics-todo */ color: #ff0000; font-weight: bold; }
.org-org-clock-overlay { /* org-clock-overlay */ background-color: #ffff00; }
.org-org-code { /* org-code */ color: #7f7f7f; }
.org-org-column { /* org-column */ background-color: #e5e5e5; }
.org-org-column-title { /* org-column-title */ background-color: #e5e5e5; font-weight: bold; text-decoration: underline; }
.org-org-date { /* org-date */ color: #a020f0; text-decoration: underline; }
.org-org-document-info { /* org-document-info */ color: #191970; }
.org-org-document-info-keyword { /* org-document-info-keyword */ color: #7f7f7f; }
.org-org-document-title { /* org-document-title */ color: #191970; font-size: 144%; font-weight: bold; }
.org-org-done { /* org-done */ color: #228b22; font-weight: bold; }
.org-org-drawer { /* org-drawer */ color: #0000ff; }
.org-org-ellipsis { /* org-ellipsis */ color: #b8860b; text-decoration: underline; }
.org-org-footnote { /* org-footnote */ color: #a020f0; text-decoration: underline; }
.org-org-formula { /* org-formula */ color: #b22222; }
.org-org-headline-done { /* org-headline-done */ color: #bc8f8f; }
.org-org-hide { /* org-hide */ color: #ffffff; }
.org-org-latex-and-export-specials { /* org-latex-and-export-specials */ color: #8b4513; }
.org-org-level-1 { /* org-level-1 */ color: #0000ff; }
.org-org-level-2 { /* org-level-2 */ color: #a0522d; }
.org-org-level-3 { /* org-level-3 */ color: #a020f0; }
.org-org-level-4 { /* org-level-4 */ color: #b22222; }
.org-org-level-5 { /* org-level-5 */ color: #228b22; }
.org-org-level-6 { /* org-level-6 */ color: #008b8b; }
.org-org-level-7 { /* org-level-7 */ color: #7a378b; }
.org-org-level-8 { /* org-level-8 */ color: #8b2252; }
.org-org-link { /* org-link */ color: #0000ff; text-decoration: underline; }
.org-org-meta-line { /* org-meta-line */ color: #b22222; }
.org-org-mode-line-clock { /* org-mode-line-clock */ color: #000000; background-color: #bfbfbf; }
.org-org-mode-line-clock-overrun { /* org-mode-line-clock-overrun */ color: #000000; background-color: #ff0000; }
.org-org-quote { /* org-quote */ color: #7f7f7f; }
.org-org-scheduled { /* org-scheduled */ color: #006400; }
.org-org-scheduled-previously { /* org-scheduled-previously */ color: #b22222; }
.org-org-scheduled-today { /* org-scheduled-today */ color: #006400; }
.org-org-sexp-date { /* org-sexp-date */ color: #a020f0; }
.org-org-special-keyword { /* org-special-keyword */ color: #a020f0; }
.org-org-table { /* org-table */ color: #0000ff; }
.org-org-tag { /* org-tag */ font-weight: bold; }
.org-org-target { /* org-target */ text-decoration: underline; }
.org-org-time-grid { /* org-time-grid */ color: #b8860b; }
.org-org-todo { /* org-todo */ color: #ff0000; font-weight: bold; }
.org-org-upcoming-deadline { /* org-upcoming-deadline */ color: #b22222; }
.org-org-verbatim { /* org-verbatim */ color: #7f7f7f; }
.org-org-verse { /* org-verse */ color: #7f7f7f; }
.org-org-warning { /* org-warning */ color: #ff0000; font-weight: bold; }
.org-outline-1 { /* outline-1 */ color: #0000ff; }
.org-outline-2 { /* outline-2 */ color: #a0522d; }
.org-outline-3 { /* outline-3 */ color: #a020f0; }
.org-outline-4 { /* outline-4 */ color: #b22222; }
.org-outline-5 { /* outline-5 */ color: #228b22; }
.org-outline-6 { /* outline-6 */ color: #008b8b; }
.org-outline-7 { /* outline-7 */ color: #7a378b; }
.org-outline-8 { /* outline-8 */ color: #8b2252; }
.org-preprocessor { /* font-lock-preprocessor-face */ color: #7a378b; }
.org-query-replace { /* query-replace */ color: #b0e2ff; background-color: #cd00cd; }
.org-regexp-grouping-backslash { /* font-lock-regexp-grouping-backslash */ font-weight: bold; }
.org-regexp-grouping-construct { /* font-lock-regexp-grouping-construct */ font-weight: bold; }
.org-region { /* region */ background-color: #eedc82; }
.org-secondary-selection { /* secondary-selection */ background-color: #ffff00; }
.org-shadow { /* shadow */ color: #7f7f7f; }
.org-show-paren-match { /* show-paren-match */ background-color: #40e0d0; }
.org-show-paren-mismatch { /* show-paren-mismatch */ color: #ffffff; background-color: #a020f0; }
.org-string { /* font-lock-string-face */ color: #8b2252; }
.org-tool-bar { /* tool-bar */ color: #000000; background-color: #bfbfbf; }
.org-tooltip { /* tooltip */ color: #000000; background-color: #ffffe0; }
.org-trailing-whitespace { /* trailing-whitespace */ background-color: #ff0000; }
.org-type { /* font-lock-type-face */ color: #228b22; }
.org-underline { /* underline */ text-decoration: underline; }
.org-variable-name { /* font-lock-variable-name-face */ color: #a0522d; }
.org-warning { /* font-lock-warning-face */ color: #ff0000; font-weight: bold; }
.org-widget-button { /* widget-button */ font-weight: bold; }
.org-widget-button-pressed { /* widget-button-pressed */ color: #ff0000; }
.org-widget-documentation { /* widget-documentation */ color: #006400; }
.org-widget-field { /* widget-field */ background-color: #d9d9d9; }
.org-widget-inactive { /* widget-inactive */ color: #7f7f7f; }
.org-widget-single-line-field { /* widget-single-line-field */ background-color: #d9d9d9; }
#+END_SRC
